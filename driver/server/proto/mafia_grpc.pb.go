// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.2
// source: mafia.proto

package mafia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MafiaDriverClient is the client API for MafiaDriver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaDriverClient interface {
	DoAction(ctx context.Context, opts ...grpc.CallOption) (MafiaDriver_DoActionClient, error)
}

type mafiaDriverClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaDriverClient(cc grpc.ClientConnInterface) MafiaDriverClient {
	return &mafiaDriverClient{cc}
}

func (c *mafiaDriverClient) DoAction(ctx context.Context, opts ...grpc.CallOption) (MafiaDriver_DoActionClient, error) {
	stream, err := c.cc.NewStream(ctx, &MafiaDriver_ServiceDesc.Streams[0], "/mafia.MafiaDriver/DoAction", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaDriverDoActionClient{stream}
	return x, nil
}

type MafiaDriver_DoActionClient interface {
	Send(*Action) error
	Recv() (*ActionResponse, error)
	grpc.ClientStream
}

type mafiaDriverDoActionClient struct {
	grpc.ClientStream
}

func (x *mafiaDriverDoActionClient) Send(m *Action) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mafiaDriverDoActionClient) Recv() (*ActionResponse, error) {
	m := new(ActionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MafiaDriverServer is the server API for MafiaDriver service.
// All implementations must embed UnimplementedMafiaDriverServer
// for forward compatibility
type MafiaDriverServer interface {
	DoAction(MafiaDriver_DoActionServer) error
	mustEmbedUnimplementedMafiaDriverServer()
}

// UnimplementedMafiaDriverServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaDriverServer struct {
}

func (UnimplementedMafiaDriverServer) DoAction(MafiaDriver_DoActionServer) error {
	return status.Errorf(codes.Unimplemented, "method DoAction not implemented")
}
func (UnimplementedMafiaDriverServer) mustEmbedUnimplementedMafiaDriverServer() {}

// UnsafeMafiaDriverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaDriverServer will
// result in compilation errors.
type UnsafeMafiaDriverServer interface {
	mustEmbedUnimplementedMafiaDriverServer()
}

func RegisterMafiaDriverServer(s grpc.ServiceRegistrar, srv MafiaDriverServer) {
	s.RegisterService(&MafiaDriver_ServiceDesc, srv)
}

func _MafiaDriver_DoAction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MafiaDriverServer).DoAction(&mafiaDriverDoActionServer{stream})
}

type MafiaDriver_DoActionServer interface {
	Send(*ActionResponse) error
	Recv() (*Action, error)
	grpc.ServerStream
}

type mafiaDriverDoActionServer struct {
	grpc.ServerStream
}

func (x *mafiaDriverDoActionServer) Send(m *ActionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mafiaDriverDoActionServer) Recv() (*Action, error) {
	m := new(Action)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MafiaDriver_ServiceDesc is the grpc.ServiceDesc for MafiaDriver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MafiaDriver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mafia.MafiaDriver",
	HandlerType: (*MafiaDriverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DoAction",
			Handler:       _MafiaDriver_DoAction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mafia.proto",
}
